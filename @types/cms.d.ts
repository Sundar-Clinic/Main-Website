/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type LabTests = {
  _id: string;
  _type: "lab-tests";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: LocaleString;
  shortDescription?: LocaleString;
  description?: LocaleText;
  preparation?: LocaleString;
  turnaround?: LocaleString;
  slug?: Slug;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  body?: LocaleBlockContent;
  currentlyAvailable?: boolean;
};

export type Gallery = {
  _id: string;
  _type: "gallery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  caption?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  stars?: number;
  name?: string;
  review?: LocaleText;
  link?: string;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  question?: LocaleString;
  answer?: LocaleText;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  description?: LocaleText;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  description?: LocaleText;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "team";
  };
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  featured?: boolean;
  publishedAt?: string;
  body?: LocaleBlockContent;
};

export type LocaleBlockContent = {
  _type: "localeBlockContent";
  en?: BlockContent;
  ta?: BlockContent;
  hi?: BlockContent;
};

export type Team = {
  _id: string;
  _type: "team";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  role?: string;
  qualifications?: string;
  bio?: string;
  registrationNo?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  currentlyWorking?: boolean;
  startDate?: string;
  endDate?: string;
  languages?: Array<string>;
  instagram?: string;
  twitter?: string;
  linkedin?: string;
  website?: string;
  email?: string;
  youtube?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type LocaleText = {
  _type: "localeText";
  en?: string;
  ta?: string;
  hi?: string;
};

export type LocaleString = {
  _type: "localeString";
  en?: string;
  ta?: string;
  hi?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | BlockContent | LabTests | Gallery | Testimonial | Faq | Category | Post | LocaleBlockContent | Team | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | LocaleText | LocaleString;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: postSlugsQuery
// Query: *[_type == "post" && defined(slug.current) && publishedAt <= now()]{    slug}
export type PostSlugsQueryResult = Array<{
  slug: Slug | null;
}>;
// Variable: featuredPostsQuery
// Query: *[_type == "post" && featured == true && publishedAt <= now()][0...3]{  ..., author->{...}, categories[]->{...}} | order(publishedAt desc)
export type FeaturedPostsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  description?: LocaleText;
  slug?: Slug;
  author: {
    _id: string;
    _type: "team";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    role?: string;
    qualifications?: string;
    bio?: string;
    registrationNo?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    currentlyWorking?: boolean;
    startDate?: string;
    endDate?: string;
    languages?: Array<string>;
    instagram?: string;
    twitter?: string;
    linkedin?: string;
    website?: string;
    email?: string;
    youtube?: string;
  } | null;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: LocaleString;
    description?: LocaleText;
  }> | null;
  featured?: boolean;
  publishedAt?: string;
  body?: LocaleBlockContent;
}>;
// Variable: getAllPostsQuery
// Query: *[_type == "post" && publishedAt <= now()]{  ..., author->{...}, categories[]->{...}} | order(publishedAt desc)
export type GetAllPostsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  description?: LocaleText;
  slug?: Slug;
  author: {
    _id: string;
    _type: "team";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    role?: string;
    qualifications?: string;
    bio?: string;
    registrationNo?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    currentlyWorking?: boolean;
    startDate?: string;
    endDate?: string;
    languages?: Array<string>;
    instagram?: string;
    twitter?: string;
    linkedin?: string;
    website?: string;
    email?: string;
    youtube?: string;
  } | null;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: LocaleString;
    description?: LocaleText;
  }> | null;
  featured?: boolean;
  publishedAt?: string;
  body?: LocaleBlockContent;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug && publishedAt <= now()][0]{   ..., author->{...}, categories[]->{...}}
export type PostQueryResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: LocaleString;
  description?: LocaleText;
  slug?: Slug;
  author: {
    _id: string;
    _type: "team";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    role?: string;
    qualifications?: string;
    bio?: string;
    registrationNo?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    currentlyWorking?: boolean;
    startDate?: string;
    endDate?: string;
    languages?: Array<string>;
    instagram?: string;
    twitter?: string;
    linkedin?: string;
    website?: string;
    email?: string;
    youtube?: string;
  } | null;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: LocaleString;
    description?: LocaleText;
  }> | null;
  featured?: boolean;
  publishedAt?: string;
  body?: LocaleBlockContent;
} | null;
// Variable: faqsQuery
// Query: *[_type == "faq"]{  _id, question, answer}
export type FaqsQueryResult = Array<{
  _id: string;
  question: LocaleString | null;
  answer: LocaleText | null;
}>;
// Variable: testimonialsQuery
// Query: *[_type == "testimonial"]{  _id, stars, name, review, link}
export type TestimonialsQueryResult = Array<{
  _id: string;
  stars: number | null;
  name: string | null;
  review: LocaleText | null;
  link: string | null;
}>;
// Variable: galleryImagesQuery
// Query: *[_type == "gallery"]{  _id, caption, image}
export type GalleryImagesQueryResult = Array<{
  _id: string;
  caption: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
}>;
// Variable: teamMembersQuery
// Query: *[_type == "team"]{  ...} | order(_createdAt asc)
export type TeamMembersQueryResult = Array<{
  _id: string;
  _type: "team";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  role?: string;
  qualifications?: string;
  bio?: string;
  registrationNo?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  currentlyWorking?: boolean;
  startDate?: string;
  endDate?: string;
  languages?: Array<string>;
  instagram?: string;
  twitter?: string;
  linkedin?: string;
  website?: string;
  email?: string;
  youtube?: string;
}>;
// Variable: labTestsQuery
// Query: *[_type == "lab-tests" && currentlyAvailable == true]{  ...}
export type LabTestsQueryResult = Array<{
  _id: string;
  _type: "lab-tests";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: LocaleString;
  shortDescription?: LocaleString;
  description?: LocaleText;
  preparation?: LocaleString;
  turnaround?: LocaleString;
  slug?: Slug;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  body?: LocaleBlockContent;
  currentlyAvailable?: boolean;
}>;
// Variable: labTestQuery
// Query: *[_type == "lab-tests" && slug.current == $slug && currentlyAvailable == true][0]{  ...}
export type LabTestQueryResult = {
  _id: string;
  _type: "lab-tests";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: LocaleString;
  shortDescription?: LocaleString;
  description?: LocaleText;
  preparation?: LocaleString;
  turnaround?: LocaleString;
  slug?: Slug;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  body?: LocaleBlockContent;
  currentlyAvailable?: boolean;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\" && defined(slug.current) && publishedAt <= now()]{\n    slug\n}": PostSlugsQueryResult;
    "*[_type == \"post\" && featured == true && publishedAt <= now()][0...3]{\n  ..., author->{...}, categories[]->{...}\n} | order(publishedAt desc)": FeaturedPostsQueryResult;
    "*[_type == \"post\" && publishedAt <= now()]{\n  ..., author->{...}, categories[]->{...}\n} | order(publishedAt desc)": GetAllPostsQueryResult;
    "*[_type == \"post\" && slug.current == $slug && publishedAt <= now()][0]{ \n  ..., author->{...}, categories[]->{...}\n}": PostQueryResult;
    "*[_type == \"faq\"]{\n  _id, question, answer\n}": FaqsQueryResult;
    "*[_type == \"testimonial\"]{\n  _id, stars, name, review, link\n}": TestimonialsQueryResult;
    "*[_type == \"gallery\"]{\n  _id, caption, image\n}": GalleryImagesQueryResult;
    "*[_type == \"team\"]{\n  ...\n} | order(_createdAt asc)": TeamMembersQueryResult;
    "*[_type == \"lab-tests\" && currentlyAvailable == true]{\n  ...\n}": LabTestsQueryResult;
    "*[_type == \"lab-tests\" && slug.current == $slug && currentlyAvailable == true][0]{\n  ...\n}": LabTestQueryResult;
  }
}
